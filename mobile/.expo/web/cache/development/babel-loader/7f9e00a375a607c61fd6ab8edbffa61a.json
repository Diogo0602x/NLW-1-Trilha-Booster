{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\diogo\\\\OneDrive\\\\Documentos\\\\Diogo_Programa\\xE7\\xE3o\\\\NLW-master\\\\mobile\\\\node_modules\\\\react-native-maps\\\\lib\\\\components\\\\MapCircle.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ColorPropType from \"react-native-web/dist/exports/ColorPropType\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport View from \"react-native-web/dist/exports/View\";\nimport decorateMapComponent, { USES_DEFAULT_IMPLEMENTATION, SUPPORTED } from \"./decorateMapComponent\";\nvar viewPropTypes = ViewPropTypes || View.propTypes;\n\nvar propTypes = _objectSpread(_objectSpread({}, viewPropTypes), {}, {\n  center: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired\n  }).isRequired,\n  radius: PropTypes.number.isRequired,\n  onPress: PropTypes.func,\n  strokeWidth: PropTypes.number,\n  strokeColor: ColorPropType,\n  fillColor: ColorPropType,\n  zIndex: PropTypes.number,\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n  miterLimit: PropTypes.number,\n  lineDashPhase: PropTypes.number,\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number)\n});\n\nvar defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1\n};\n\nvar MapCircle = function (_React$Component) {\n  _inherits(MapCircle, _React$Component);\n\n  var _super = _createSuper(MapCircle);\n\n  function MapCircle() {\n    _classCallCheck(this, MapCircle);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MapCircle, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      this.circle.setNativeProps(props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var AIRMapCircle = this.getAirComponent();\n      return React.createElement(AIRMapCircle, _extends({}, this.props, {\n        ref: function ref(_ref) {\n          _this.circle = _ref;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return MapCircle;\n}(React.Component);\n\nMapCircle.propTypes = propTypes;\nMapCircle.defaultProps = defaultProps;\nexport default decorateMapComponent(MapCircle, {\n  componentType: 'Circle',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/diogo/OneDrive/Documentos/Diogo_Programação/NLW-master/mobile/node_modules/react-native-maps/lib/components/MapCircle.js"],"names":["PropTypes","React","decorateMapComponent","USES_DEFAULT_IMPLEMENTATION","SUPPORTED","viewPropTypes","ViewPropTypes","View","propTypes","center","shape","latitude","number","isRequired","longitude","radius","onPress","func","strokeWidth","strokeColor","ColorPropType","fillColor","zIndex","lineCap","oneOf","lineJoin","miterLimit","lineDashPhase","lineDashPattern","arrayOf","defaultProps","MapCircle","props","circle","setNativeProps","AIRMapCircle","getAirComponent","ref","Component","componentType","providers","google","ios","android"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,OAAOC,oBAAP,IACEC,2BADF,EAEEC,SAFF;AAMA,IAAMC,aAAa,GAAGC,aAAa,IAAIC,IAAI,CAACC,SAA5C;;AAEA,IAAMA,SAAS,mCACVH,aADU;AAMbI,EAAAA,MAAM,EAAET,SAAS,CAACU,KAAV,CAAgB;AAItBC,IAAAA,QAAQ,EAAEX,SAAS,CAACY,MAAV,CAAiBC,UAJL;AAKtBC,IAAAA,SAAS,EAAEd,SAAS,CAACY,MAAV,CAAiBC;AALN,GAAhB,EAMLA,UAZU;AAiBbE,EAAAA,MAAM,EAAEf,SAAS,CAACY,MAAV,CAAiBC,UAjBZ;AAsBbG,EAAAA,OAAO,EAAEhB,SAAS,CAACiB,IAtBN;AA2BbC,EAAAA,WAAW,EAAElB,SAAS,CAACY,MA3BV;AAgCbO,EAAAA,WAAW,EAAEC,aAhCA;AAqCbC,EAAAA,SAAS,EAAED,aArCE;AA8CbE,EAAAA,MAAM,EAAEtB,SAAS,CAACY,MA9CL;AAsDbW,EAAAA,OAAO,EAAEvB,SAAS,CAACwB,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,CAAhB,CAtDI;AA8DbC,EAAAA,QAAQ,EAAEzB,SAAS,CAACwB,KAAV,CAAgB,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAAhB,CA9DG;AA0EbE,EAAAA,UAAU,EAAE1B,SAAS,CAACY,MA1ET;AAuFbe,EAAAA,aAAa,EAAE3B,SAAS,CAACY,MAvFZ;AAqGbgB,EAAAA,eAAe,EAAE5B,SAAS,CAAC6B,OAAV,CAAkB7B,SAAS,CAACY,MAA5B;AArGJ,EAAf;;AAwGA,IAAMkB,YAAY,GAAG;AACnBX,EAAAA,WAAW,EAAE,MADM;AAEnBD,EAAAA,WAAW,EAAE;AAFM,CAArB;;IAKMa,S;;;;;;;;;;;;;WACJ,wBAAeC,KAAf,EAAsB;AACpB,WAAKC,MAAL,CAAYC,cAAZ,CAA2BF,KAA3B;AACD;;;WAED,kBAAS;AAAA;;AACP,UAAMG,YAAY,GAAG,KAAKC,eAAL,EAArB;AACA,aACE,oBAAC,YAAD,eACM,KAAKJ,KADX;AAEE,QAAA,GAAG,EAAE,aAAAK,IAAG,EAAI;AACV,UAAA,KAAI,CAACJ,MAAL,GAAcI,IAAd;AACD,SAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAQD;;;;EAfqBpC,KAAK,CAACqC,S;;AAkB9BP,SAAS,CAACvB,SAAV,GAAsBA,SAAtB;AACAuB,SAAS,CAACD,YAAV,GAAyBA,YAAzB;AAEA,eAAe5B,oBAAoB,CAAC6B,SAAD,EAAY;AAC7CQ,EAAAA,aAAa,EAAE,QAD8B;AAE7CC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAEtC,SADC;AAENuC,MAAAA,OAAO,EAAExC;AAFH;AADC;AAFkC,CAAZ,CAAnC","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ColorPropType, ViewPropTypes, View } from 'react-native';\nimport decorateMapComponent, {\n  USES_DEFAULT_IMPLEMENTATION,\n  SUPPORTED,\n} from './decorateMapComponent';\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nconst propTypes = {\n  ...viewPropTypes,\n\n  /**\n   * The coordinate of the center of the circle\n   */\n  center: PropTypes.shape({\n    /**\n     * Coordinates for the center of the circle.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n  }).isRequired,\n\n  /**\n   * The radius of the circle to be drawn (in meters)\n   */\n  radius: PropTypes.number.isRequired,\n\n  /**\n   * Callback that is called when the user presses on the circle\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * The stroke width to use for the path.\n   */\n  strokeWidth: PropTypes.number,\n\n  /**\n   * The stroke color to use for the path.\n   */\n  strokeColor: ColorPropType,\n\n  /**\n   * The fill color to use for the path.\n   */\n  fillColor: ColorPropType,\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\n   * with the same z-index is arbitrary. The default zIndex is 0.\n   *\n   * @platform android\n   */\n  zIndex: PropTypes.number,\n\n  /**\n   * The line cap style to apply to the open ends of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n\n  /**\n   * The line join style to apply to corners of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n\n  /**\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\n   * is less than 11 degrees.\n   *\n   * @platform ios\n   */\n  miterLimit: PropTypes.number,\n\n  /**\n   * The offset (in points) at which to start drawing the dash pattern.\n   *\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\n   * middle of the first gap.\n   *\n   * The default value of this property is 0.\n   *\n   * @platform ios\n   */\n  lineDashPhase: PropTypes.number,\n\n  /**\n   * An array of numbers specifying the dash pattern to use for the path.\n   *\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\n   * first line segment length, followed by the first gap length, followed by the second line\n   * segment length, and so on.\n   *\n   * This property is set to `null` by default, which indicates no line dash pattern.\n   *\n   * @platform ios\n   */\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\n};\n\nconst defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1,\n};\n\nclass MapCircle extends React.Component {\n  setNativeProps(props) {\n    this.circle.setNativeProps(props);\n  }\n\n  render() {\n    const AIRMapCircle = this.getAirComponent();\n    return (\n      <AIRMapCircle\n        {...this.props}\n        ref={ref => {\n          this.circle = ref;\n        }}\n      />\n    );\n  }\n}\n\nMapCircle.propTypes = propTypes;\nMapCircle.defaultProps = defaultProps;\n\nexport default decorateMapComponent(MapCircle, {\n  componentType: 'Circle',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION,\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}