{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { CommonActions } from '@react-navigation/routers';\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nimport UnhandledActionContext from \"./UnhandledActionContext\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport NavigationContext from \"./NavigationContext\";\nimport { ScheduleUpdateContext } from \"./useScheduleUpdate\";\nimport useChildListeners from \"./useChildListeners\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useOptionsGetters from \"./useOptionsGetters\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useSyncState from \"./useSyncState\";\nimport checkSerializable from \"./checkSerializable\";\nvar NOT_INITIALIZED_ERROR = \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop#handling-initialization for more details.\";\nvar serializableWarnings = [];\n\ntry {\n  Object.defineProperty(global, 'REACT_NAVIGATION_REDUX_DEVTOOLS_EXTENSION_INTEGRATION_ENABLED', {\n    set: function set(_) {\n      console.warn(\"Redux devtools extension integration can be enabled with the '@react-navigation/devtools' package. For more details, see https://reactnavigation.org/docs/devtools\");\n    }\n  });\n} catch (e) {}\n\nvar getPartialState = function getPartialState(state) {\n  if (state === undefined) {\n    return;\n  }\n\n  var key = state.key,\n      routeNames = state.routeNames,\n      partialState = _objectWithoutProperties(state, [\"key\", \"routeNames\"]);\n\n  return _objectSpread(_objectSpread({}, partialState), {}, {\n    stale: true,\n    routes: state.routes.map(function (route) {\n      if (route.state === undefined) {\n        return route;\n      }\n\n      return _objectSpread(_objectSpread({}, route), {}, {\n        state: getPartialState(route.state)\n      });\n    })\n  });\n};\n\nvar BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  var initialState = _ref.initialState,\n      onStateChange = _ref.onStateChange,\n      onUnhandledAction = _ref.onUnhandledAction,\n      independent = _ref.independent,\n      children = _ref.children;\n  var parent = React.useContext(NavigationStateContext);\n\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n\n  var _useSyncState = useSyncState(function () {\n    return getPartialState(initialState == null ? undefined : initialState);\n  }),\n      _useSyncState2 = _slicedToArray(_useSyncState, 5),\n      state = _useSyncState2[0],\n      getState = _useSyncState2[1],\n      setState = _useSyncState2[2],\n      scheduleUpdate = _useSyncState2[3],\n      flushUpdates = _useSyncState2[4];\n\n  var isFirstMountRef = React.useRef(true);\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  var _useChildListeners = useChildListeners(),\n      listeners = _useChildListeners.listeners,\n      addListener = _useChildListeners.addListener;\n\n  var _useKeyedChildListene = useKeyedChildListeners(),\n      keyedListeners = _useKeyedChildListene.keyedListeners,\n      addKeyedListener = _useKeyedChildListene.addKeyedListener;\n\n  var dispatch = function dispatch(action) {\n    if (listeners.focus[0] == null) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n\n    listeners.focus[0](function (navigation) {\n      return navigation.dispatch(action);\n    });\n  };\n\n  var canGoBack = function canGoBack() {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n\n    var _listeners$focus$ = listeners.focus[0](function (navigation) {\n      return navigation.canGoBack();\n    }),\n        result = _listeners$focus$.result,\n        handled = _listeners$focus$.handled;\n\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  };\n\n  var resetRoot = React.useCallback(function (state) {\n    var _state$key, _keyedListeners$getSt, _keyedListeners$getSt2;\n\n    var target = (_state$key = state === null || state === void 0 ? void 0 : state.key) !== null && _state$key !== void 0 ? _state$key : (_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key;\n\n    if (target == null) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n\n    listeners.focus[0](function (navigation) {\n      return navigation.dispatch(_objectSpread(_objectSpread({}, CommonActions.reset(state)), {}, {\n        target: target\n      }));\n    });\n  }, [keyedListeners.getState, listeners.focus]);\n  var getRootState = React.useCallback(function () {\n    var _keyedListeners$getSt3, _keyedListeners$getSt4;\n\n    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);\n  }, [keyedListeners.getState]);\n  var getCurrentRoute = React.useCallback(function () {\n    var state = getRootState();\n\n    if (state === undefined) {\n      return undefined;\n    }\n\n    while (state.routes[state.index].state !== undefined) {\n      state = state.routes[state.index].state;\n    }\n\n    return state.routes[state.index];\n  }, [getRootState]);\n  var emitter = useEventEmitter();\n\n  var _useOptionsGetters = useOptionsGetters({}),\n      addOptionsGetter = _useOptionsGetters.addOptionsGetter,\n      getCurrentOptions = _useOptionsGetters.getCurrentOptions;\n\n  React.useImperativeHandle(ref, function () {\n    return _objectSpread(_objectSpread(_objectSpread({}, Object.keys(CommonActions).reduce(function (acc, name) {\n      acc[name] = function () {\n        return dispatch(CommonActions[name].apply(CommonActions, arguments));\n      };\n\n      return acc;\n    }, {})), emitter.create('root')), {}, {\n      resetRoot: resetRoot,\n      dispatch: dispatch,\n      canGoBack: canGoBack,\n      getRootState: getRootState,\n      dangerouslyGetState: function dangerouslyGetState() {\n        return state;\n      },\n      dangerouslyGetParent: function dangerouslyGetParent() {\n        return undefined;\n      },\n      getCurrentRoute: getCurrentRoute,\n      getCurrentOptions: getCurrentOptions\n    });\n  });\n  var onDispatchAction = React.useCallback(function (action, noop) {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action: action,\n        noop: noop\n      }\n    });\n  }, [emitter]);\n  var lastEmittedOptionsRef = React.useRef();\n  var onOptionsChange = React.useCallback(function (options) {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options: options\n      }\n    });\n  }, [emitter]);\n  var builderContext = React.useMemo(function () {\n    return {\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange\n    };\n  }, [addListener, addKeyedListener, onDispatchAction, onOptionsChange]);\n  var scheduleContext = React.useMemo(function () {\n    return {\n      scheduleUpdate: scheduleUpdate,\n      flushUpdates: flushUpdates\n    };\n  }, [scheduleUpdate, flushUpdates]);\n  var isInitialRef = React.useRef(true);\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: state,\n      getState: getState,\n      setState: setState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var onStateChangeRef = React.useRef(onStateChange);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n  });\n  React.useEffect(function () {\n    if (process.env.NODE_ENV !== 'production') {\n      if (state !== undefined) {\n        var result = checkSerializable(state);\n\n        if (!result.serializable) {\n          var location = result.location,\n              reason = result.reason;\n          var path = '';\n          var pointer = state;\n          var params = false;\n\n          for (var i = 0; i < location.length; i++) {\n            var curr = location[i];\n            var prev = location[i - 1];\n            pointer = pointer[curr];\n\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              var _pointer;\n\n              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;\n            } else if (!params) {\n              path += \" > \".concat(curr);\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += \"[\".concat(curr, \"]\");\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += \".\".concat(curr);\n              } else {\n                path += \"[\".concat(JSON.stringify(curr), \"]\");\n              }\n            }\n          }\n\n          var message = \"Non-serializable values were found in the navigation state. Check:\\n\\n\".concat(path, \" (\").concat(reason, \")\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\");\n\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n      }\n    }\n\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(getRootState());\n    }\n\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  var defaultOnUnhandledAction = React.useCallback(function (action) {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n\n    var payload = action.payload;\n    var message = \"The action '\".concat(action.type, \"'\").concat(payload ? \" with payload \".concat(JSON.stringify(action.payload)) : '', \" was not handled by any navigator.\");\n\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload !== null && payload !== void 0 && payload.name) {\n          message += \"\\n\\nDo you have a screen named '\".concat(payload.name, \"'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\");\n        } else {\n          message += \"\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.\";\n        }\n\n        break;\n\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += \"\\n\\nIs there any screen to go back to?\";\n        break;\n\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += \"\\n\\nIs your screen inside a Drawer navigator?\";\n        break;\n    }\n\n    message += \"\\n\\nThis is a development-only warning and won't be shown in production.\";\n    console.error(message);\n  }, []);\n  var element = React.createElement(ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, React.createElement(NavigationBuilderContext.Provider, {\n    value: builderContext\n  }, React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(UnhandledActionContext.Provider, {\n    value: onUnhandledAction !== null && onUnhandledAction !== void 0 ? onUnhandledAction : defaultOnUnhandledAction\n  }, React.createElement(EnsureSingleNavigator, null, children)))));\n\n  if (independent) {\n    element = React.createElement(NavigationRouteContext.Provider, {\n      value: undefined\n    }, React.createElement(NavigationContext.Provider, {\n      value: undefined\n    }, element));\n  }\n\n  return element;\n});\nexport default BaseNavigationContainer;","map":{"version":3,"sources":["BaseNavigationContainer.tsx"],"names":["NOT_INITIALIZED_ERROR","serializableWarnings","Object","set","console","getPartialState","state","partialState","stale","routes","route","BaseNavigationContainer","children","parent","React","useSyncState","initialState","isFirstMountRef","navigatorKeyRef","getKey","setKey","key","addListener","useChildListeners","addKeyedListener","useKeyedChildListeners","dispatch","action","listeners","navigation","canGoBack","handled","resetRoot","target","CommonActions","keyedListeners","getRootState","getCurrentRoute","emitter","useEventEmitter","getCurrentOptions","useOptionsGetters","acc","dangerouslyGetState","dangerouslyGetParent","onDispatchAction","type","data","noop","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","scheduleUpdate","flushUpdates","isInitialRef","getIsInitial","context","getState","setState","addOptionsGetter","onStateChangeRef","process","result","checkSerializable","reason","path","pointer","params","i","location","curr","prev","JSON","message","defaultOnUnhandledAction","payload","element","onUnhandledAction","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  Route,\n  NavigationState,\n  InitialState,\n  PartialState,\n  NavigationAction,\n} from '@react-navigation/routers';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationContext from './NavigationContext';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useChildListeners from './useChildListeners';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport useEventEmitter from './useEventEmitter';\nimport useSyncState from './useSyncState';\nimport checkSerializable from './checkSerializable';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerRef,\n  NavigationContainerProps,\n} from './types';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst NOT_INITIALIZED_ERROR =\n  \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop#handling-initialization for more details.\";\n\nconst serializableWarnings: string[] = [];\n\ntry {\n  /**\n   * Migration instructions for removal of devtools from core\n   */\n  Object.defineProperty(\n    global,\n    'REACT_NAVIGATION_REDUX_DEVTOOLS_EXTENSION_INTEGRATION_ENABLED',\n    {\n      set(_) {\n        console.warn(\n          \"Redux devtools extension integration can be enabled with the '@react-navigation/devtools' package. For more details, see https://reactnavigation.org/docs/devtools\"\n        );\n      },\n    }\n  );\n} catch (e) {\n  // Ignore\n}\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [\n      state,\n      getState,\n      setState,\n      scheduleUpdate,\n      flushUpdates,\n    ] = useSyncState<State>(() =>\n      getPartialState(initialState == null ? undefined : initialState)\n    );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = (\n      action: NavigationAction | ((state: NavigationState) => NavigationAction)\n    ) => {\n      if (listeners.focus[0] == null) {\n        throw new Error(NOT_INITIALIZED_ERROR);\n      }\n\n      listeners.focus[0]((navigation) => navigation.dispatch(action));\n    };\n\n    const canGoBack = () => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    };\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          throw new Error(NOT_INITIALIZED_ERROR);\n        }\n\n        listeners.focus[0]((navigation) =>\n          navigation.dispatch({\n            ...CommonActions.reset(state),\n            target,\n          })\n        );\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      let state = getRootState();\n      if (state === undefined) {\n        return undefined;\n      }\n      while (state.routes[state.index].state !== undefined) {\n        state = state.routes[state.index].state as NavigationState;\n      }\n      return state.routes[state.index];\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    React.useImperativeHandle(ref, () => ({\n      ...(Object.keys(CommonActions) as (keyof typeof CommonActions)[]).reduce<\n        any\n      >((acc, name) => {\n        acc[name] = (...args: any[]) =>\n          dispatch(\n            CommonActions[name](\n              // @ts-expect-error: we can't know the type statically\n              ...args\n            )\n          );\n        return acc;\n      }, {}),\n      ...emitter.create('root'),\n      resetRoot,\n      dispatch,\n      canGoBack,\n      getRootState,\n      dangerouslyGetState: () => state,\n      dangerouslyGetParent: () => undefined,\n      getCurrentRoute,\n      getCurrentOptions,\n    }));\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({ type: '__unsafe_action__', data: { action, noop } });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n    });\n\n    React.useEffect(() => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (state !== undefined) {\n          const result = checkSerializable(state);\n\n          if (!result.serializable) {\n            const { location, reason } = result;\n\n            let path = '';\n            let pointer: Record<any, any> = state;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(getRootState());\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <ScheduleUpdateContext.Provider value={scheduleContext}>\n        <NavigationBuilderContext.Provider value={builderContext}>\n          <NavigationStateContext.Provider value={context}>\n            <UnhandledActionContext.Provider\n              value={onUnhandledAction ?? defaultOnUnhandledAction}\n            >\n              <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n            </UnhandledActionContext.Provider>\n          </NavigationStateContext.Provider>\n        </NavigationBuilderContext.Provider>\n      </ScheduleUpdateContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"module"}