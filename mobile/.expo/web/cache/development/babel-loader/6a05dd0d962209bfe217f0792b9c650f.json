{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from '@unimodules/core';\nimport { getAssetByID } from \"./AssetRegistry\";\nimport * as AssetSources from \"./AssetSources\";\nimport * as AssetUris from \"./AssetUris\";\nimport { getEmbeddedAssetUri } from \"./EmbeddedAssets\";\nimport * as ImageAssets from \"./ImageAssets\";\nimport { downloadAsync as _downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from \"./PlatformUtils\";\nimport resolveAssetSource from \"./resolveAssetSource\";\n\nvar Asset = function () {\n  var Asset = function () {\n    function Asset(_ref) {\n      var name = _ref.name,\n          type = _ref.type,\n          _ref$hash = _ref.hash,\n          hash = _ref$hash === void 0 ? null : _ref$hash,\n          uri = _ref.uri,\n          width = _ref.width,\n          height = _ref.height;\n\n      _classCallCheck(this, Asset);\n\n      this.hash = null;\n      this.localUri = null;\n      this.width = null;\n      this.height = null;\n      this.downloading = false;\n      this.downloaded = false;\n      this._downloadCallbacks = [];\n      this.name = name;\n      this.type = type;\n      this.hash = hash;\n      this.uri = uri;\n\n      if (typeof width === 'number') {\n        this.width = width;\n      }\n\n      if (typeof height === 'number') {\n        this.height = height;\n      }\n\n      if (hash) {\n        this.localUri = getEmbeddedAssetUri(hash, type);\n\n        if (this.localUri) {\n          this.downloaded = true;\n        }\n      }\n\n      if (Platform.OS === 'web') {\n        if (!name) {\n          this.name = AssetUris.getFilename(uri);\n        }\n\n        if (!type) {\n          this.type = AssetUris.getFileExtension(uri);\n        }\n      }\n    }\n\n    _createClass(Asset, [{\n      key: \"downloadAsync\",\n      value: function downloadAsync() {\n        var _this = this;\n\n        var _await$ImageAssets$ge, width, height, name;\n\n        return _regeneratorRuntime.async(function downloadAsync$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.downloaded) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                if (!this.downloading) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 5;\n                return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n                  _this._downloadCallbacks.push({\n                    resolve: resolve,\n                    reject: reject\n                  });\n                }));\n\n              case 5:\n                return _context.abrupt(\"return\");\n\n              case 6:\n                this.downloading = true;\n                _context.prev = 7;\n\n                if (!(Platform.OS === 'web')) {\n                  _context.next = 22;\n                  break;\n                }\n\n                if (!ImageAssets.isImageType(this.type)) {\n                  _context.next = 21;\n                  break;\n                }\n\n                _context.next = 12;\n                return _regeneratorRuntime.awrap(ImageAssets.getImageInfoAsync(this.uri));\n\n              case 12:\n                _await$ImageAssets$ge = _context.sent;\n                width = _await$ImageAssets$ge.width;\n                height = _await$ImageAssets$ge.height;\n                name = _await$ImageAssets$ge.name;\n                this.width = width;\n                this.height = height;\n                this.name = name;\n                _context.next = 22;\n                break;\n\n              case 21:\n                this.name = AssetUris.getFilename(this.uri);\n\n              case 22:\n                _context.next = 24;\n                return _regeneratorRuntime.awrap(_downloadAsync(this.uri, this.hash, this.type, this.name));\n\n              case 24:\n                this.localUri = _context.sent;\n                this.downloaded = true;\n\n                this._downloadCallbacks.forEach(function (_ref2) {\n                  var resolve = _ref2.resolve;\n                  return resolve();\n                });\n\n                _context.next = 33;\n                break;\n\n              case 29:\n                _context.prev = 29;\n                _context.t0 = _context[\"catch\"](7);\n\n                this._downloadCallbacks.forEach(function (_ref3) {\n                  var reject = _ref3.reject;\n                  return reject(_context.t0);\n                });\n\n                throw _context.t0;\n\n              case 33:\n                _context.prev = 33;\n                this.downloading = false;\n                this._downloadCallbacks = [];\n                return _context.finish(33);\n\n              case 37:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this, [[7, 29, 33, 37]], Promise);\n      }\n    }], [{\n      key: \"loadAsync\",\n      value: function loadAsync(moduleId) {\n        var moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n        return Promise.all(moduleIds.map(function (moduleId) {\n          return Asset.fromModule(moduleId).downloadAsync();\n        }));\n      }\n    }, {\n      key: \"fromModule\",\n      value: function fromModule(virtualAssetModule) {\n        if (typeof virtualAssetModule === 'string') {\n          return Asset.fromURI(virtualAssetModule);\n        }\n\n        var meta = getAssetByID(virtualAssetModule);\n\n        if (!meta) {\n          throw new Error(\"Module \\\"\" + virtualAssetModule + \"\\\" is missing from the asset registry\");\n        }\n\n        if (!IS_ENV_WITH_UPDATES_ENABLED) {\n          var _resolveAssetSource = resolveAssetSource(virtualAssetModule),\n              uri = _resolveAssetSource.uri;\n\n          var asset = new Asset({\n            name: meta.name,\n            type: meta.type,\n            hash: meta.hash,\n            uri: uri,\n            width: meta.width,\n            height: meta.height\n          });\n\n          if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n            asset.localUri = asset.uri;\n            asset.downloaded = true;\n          }\n\n          Asset.byHash[meta.hash] = asset;\n          return asset;\n        }\n\n        return Asset.fromMetadata(meta);\n      }\n    }, {\n      key: \"fromMetadata\",\n      value: function fromMetadata(meta) {\n        var metaHash = meta.hash;\n\n        if (Asset.byHash[metaHash]) {\n          return Asset.byHash[metaHash];\n        }\n\n        var _AssetSources$selectA = AssetSources.selectAssetSource(meta),\n            uri = _AssetSources$selectA.uri,\n            hash = _AssetSources$selectA.hash;\n\n        var asset = new Asset({\n          name: meta.name,\n          type: meta.type,\n          hash: hash,\n          uri: uri,\n          width: meta.width,\n          height: meta.height\n        });\n        Asset.byHash[metaHash] = asset;\n        return asset;\n      }\n    }, {\n      key: \"fromURI\",\n      value: function fromURI(uri) {\n        if (Asset.byUri[uri]) {\n          return Asset.byUri[uri];\n        }\n\n        var type = '';\n\n        if (uri.indexOf(';base64') > -1) {\n          type = uri.split(';')[0].split('/')[1];\n        } else {\n          var extension = AssetUris.getFileExtension(uri);\n          type = extension.startsWith('.') ? extension.substring(1) : extension;\n        }\n\n        var asset = new Asset({\n          name: '',\n          type: type,\n          hash: null,\n          uri: uri\n        });\n        Asset.byUri[uri] = asset;\n        return asset;\n      }\n    }]);\n\n    return Asset;\n  }();\n\n  Asset.byHash = {};\n  Asset.byUri = {};\n  return Asset;\n}();\n\nexport { Asset };","map":{"version":3,"sources":["../src/Asset.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from '@unimodules/core';\n\nimport { getAssetByID } from './AssetRegistry';\nimport * as AssetSources from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport { getEmbeddedAssetUri } from './EmbeddedAssets';\nimport * as ImageAssets from './ImageAssets';\nimport { downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from './PlatformUtils';\nimport resolveAssetSource from './resolveAssetSource';\n\ntype AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport type AssetMetadata = AssetSources.AssetMetadata;\n\nexport class Asset {\n  static byHash = {};\n  static byUri = {};\n\n  name: string;\n  type: string;\n  hash: string | null = null;\n  uri: string;\n  localUri: string | null = null;\n  width: number | null = null;\n  height: number | null = null;\n  downloading: boolean = false;\n  downloaded: boolean = false;\n  _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (hash) {\n      this.localUri = getEmbeddedAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  static loadAsync(moduleId: number | number[]): Promise<void[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map(moduleId => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  static fromModule(virtualAssetModule: number | string): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_ENV_WITH_UPDATES_ENABLED) {\n      const { uri } = resolveAssetSource(virtualAssetModule);\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    }\n\n    const { uri, hash } = AssetSources.selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  async downloadAsync(): Promise<void> {\n    if (this.downloaded) {\n      return;\n    }\n    if (this.downloading) {\n      await new Promise((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        if (ImageAssets.isImageType(this.type)) {\n          const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n          this.width = width;\n          this.height = height;\n          this.name = name;\n        } else {\n          this.name = AssetUris.getFilename(this.uri);\n        }\n      }\n      this.localUri = await downloadAsync(this.uri, this.hash, this.type, this.name);\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}