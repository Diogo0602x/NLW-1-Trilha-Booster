{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport qs from 'query-string';\n\nfunction removeNullishValues(obj) {\n  for (var propName in obj) {\n    if (obj[propName] == null) {\n      delete obj[propName];\n    }\n  }\n\n  return obj;\n}\n\nfunction checkValue(value) {\n  if (!value) {\n    return null;\n  }\n\n  var arr = Array.isArray(value) ? value : [value];\n  return arr.join(',');\n}\n\nexport default {\n  get name() {\n    return 'ExpoMailComposer';\n  },\n\n  composeAsync: function composeAsync(options) {\n    var email, query, queryComponent, to, mailto;\n    return _regeneratorRuntime.async(function composeAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = removeNullishValues({\n              cc: checkValue(options.ccRecipients),\n              bcc: checkValue(options.bccRecipients),\n              subject: options.subject,\n              body: options.body\n            });\n            query = qs.stringify(email);\n            queryComponent = query ? '?' + query : '';\n            to = checkValue(options.recipients) || '';\n            mailto = \"mailto:\" + to + queryComponent;\n            window.open(mailto);\n            return _context.abrupt(\"return\", {\n              status: 'undetermined'\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  isAvailableAsync: function isAvailableAsync() {\n    return _regeneratorRuntime.async(function isAvailableAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", true);\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["../src/ExpoMailComposer.web.ts"],"names":[],"mappings":";AAAA,OAAO,EAAP,MAAe,cAAf;;AAIA,SAAS,mBAAT,CAA6B,GAA7B,EAAgC;AAC9B,OAAK,IAAM,QAAX,IAAuB,GAAvB,EAA4B;AAC1B,QAAI,GAAG,CAAC,QAAD,CAAH,IAAiB,IAArB,EAA2B;AACzB,aAAO,GAAG,CAAC,QAAD,CAAV;AACD;AACF;;AACD,SAAO,GAAP;AACD;;AAED,SAAS,UAAT,CAAoB,KAApB,EAA6C;AAC3C,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED,MAAM,GAAG,GAAG,KAAK,CAAC,OAAN,CAAc,KAAd,IAAuB,KAAvB,GAA+B,CAAC,KAAD,CAA3C;AACA,SAAO,GAAG,CAAC,IAAJ,CAAS,GAAT,CAAP;AACD;;AAED,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,kBAAP;AACD,GAHY;;AAIP,EAAA,YAJO,wBAIM,OAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAKL,YAAA,KALK,GAKG,mBAAmB,CAAC;AAChC,cAAA,EAAE,EAAE,UAAU,CAAC,OAAO,CAAC,YAAT,CADkB;AAEhC,cAAA,GAAG,EAAE,UAAU,CAAC,OAAO,CAAC,aAAT,CAFiB;AAGhC,cAAA,OAAO,EAAE,OAAO,CAAC,OAHe;AAIhC,cAAA,IAAI,EAAE,OAAO,CAAC;AAJkB,aAAD,CALtB;AAYL,YAAA,KAZK,GAYG,EAAE,CAAC,SAAH,CAAa,KAAb,CAZH;AAaL,YAAA,cAbK,GAaY,KAAK,GAAG,MAAM,KAAT,GAAiB,EAblC;AAcL,YAAA,EAdK,GAcA,UAAU,CAAC,OAAO,CAAC,UAAT,CAAV,IAAkC,EAdlC;AAeL,YAAA,MAfK,eAec,EAfd,GAemB,cAfnB;AAiBX,YAAA,MAAM,CAAC,IAAP,CAAY,MAAZ;AAjBW,6CAmBJ;AAAE,cAAA,MAAM,EAAE;AAAV,aAnBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBP,EAAA,gBArBO;AAAA;AAAA;AAAA;AAAA;AAAA,8CAsBJ,IAtBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import qs from 'query-string';\n\nimport { MailComposerOptions, MailComposerResult } from './MailComposer.types';\n\nfunction removeNullishValues(obj) {\n  for (const propName in obj) {\n    if (obj[propName] == null) {\n      delete obj[propName];\n    }\n  }\n  return obj;\n}\n\nfunction checkValue(value?: string[] | string): string | null {\n  if (!value) {\n    return null;\n  }\n\n  const arr = Array.isArray(value) ? value : [value];\n  return arr.join(',');\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoMailComposer';\n  },\n  async composeAsync(options: MailComposerOptions): Promise<MailComposerResult> {\n    const email = removeNullishValues({\n      cc: checkValue(options.ccRecipients),\n      bcc: checkValue(options.bccRecipients),\n      subject: options.subject,\n      body: options.body,\n    });\n\n    const query = qs.stringify(email);\n    const queryComponent = query ? '?' + query : '';\n    const to = checkValue(options.recipients) || '';\n    const mailto = `mailto:${to}${queryComponent}`;\n\n    window.open(mailto);\n\n    return { status: 'undetermined' };\n  },\n  async isAvailableAsync(): Promise<boolean> {\n    return true;\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}